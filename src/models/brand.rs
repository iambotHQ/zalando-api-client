/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Brand : Zalando API Brand Schema

#[derive(Debug, Serialize, Deserialize)]
pub struct Brand {
  /// The unique key for a brand
  #[serde(rename = "key")] key: String,
  /// Name of the brand
  #[serde(rename = "name")] name: String,
  /// The url of the brand within the Zalando web shop
  #[serde(rename = "shopUrl")] shop_url: String,
  /// The url of the brand logo within the Zalando web shop
  #[serde(rename = "logoUrl")] logo_url: Option<String>,
  /// The url of the large brand logo within the Zalando web shop
  #[serde(rename = "logoLargeUrl")] logo_large_url: Option<String>,
  #[serde(rename = "brandFamily")] brand_family: Option<::models::BrandFamily>
}

impl Brand {
  /// Zalando API Brand Schema
  pub fn new(key: String, name: String, shop_url: String) -> Brand {
    Brand {
      key: key,
      name: name,
      shop_url: shop_url,
      logo_url: None,
      logo_large_url: None,
      brand_family: None
    }
  }

  pub fn set_key(&mut self, key: String) {
    self.key = key;
  }

  pub fn with_key(mut self, key: String) -> Brand {
    self.key = key;
    self
  }

  pub fn key(&self) -> &String {
    &self.key
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Brand {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }

  pub fn set_shop_url(&mut self, shop_url: String) {
    self.shop_url = shop_url;
  }

  pub fn with_shop_url(mut self, shop_url: String) -> Brand {
    self.shop_url = shop_url;
    self
  }

  pub fn shop_url(&self) -> &String {
    &self.shop_url
  }

  pub fn set_logo_url(&mut self, logo_url: String) {
    self.logo_url = Some(logo_url);
  }

  pub fn with_logo_url(mut self, logo_url: String) -> Brand {
    self.logo_url = Some(logo_url);
    self
  }

  pub fn logo_url(&self) -> &String {
    &self.logo_url
  }

  pub fn set_logo_large_url(&mut self, logo_large_url: String) {
    self.logo_large_url = Some(logo_large_url);
  }

  pub fn with_logo_large_url(mut self, logo_large_url: String) -> Brand {
    self.logo_large_url = Some(logo_large_url);
    self
  }

  pub fn logo_large_url(&self) -> &String {
    &self.logo_large_url
  }

  pub fn set_brand_family(&mut self, brand_family: ::models::BrandFamily) {
    self.brand_family = Some(brand_family);
  }

  pub fn with_brand_family(mut self, brand_family: ::models::BrandFamily) -> Brand {
    self.brand_family = Some(brand_family);
    self
  }

  pub fn brand_family(&self) -> &::models::BrandFamily {
    &self.brand_family
  }

}



