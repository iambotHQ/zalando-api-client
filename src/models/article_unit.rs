/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// ArticleUnit : Zalando API Article Unit Schema

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct ArticleUnit {
  /// article id (sku)
  #[serde(rename = "id")] id: String,
  /// article size
  #[serde(rename = "size")] size: String,
  #[serde(rename = "price")] price: ::models::ArticlePrice,
  #[serde(rename = "originalPrice")] original_price: ::models::ArticlePrice,
  /// availability of the article
  #[serde(rename = "available")] available: bool,
  /// stock of the article
  #[serde(rename = "stock")] stock: i32,
  /// partner id (vendor id) of the article
  #[serde(rename = "partnerId")] partner_id: Option<String>
}

impl ArticleUnit {
  /// Zalando API Article Unit Schema
  pub fn new(id: String, size: String, price: ::models::ArticlePrice, original_price: ::models::ArticlePrice, available: bool, stock: i32) -> ArticleUnit {
    ArticleUnit {
      id: id,
      size: size,
      price: price,
      original_price: original_price,
      available: available,
      stock: stock,
      partner_id: None
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> ArticleUnit {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }

  pub fn set_size(&mut self, size: String) {
    self.size = size;
  }

  pub fn with_size(mut self, size: String) -> ArticleUnit {
    self.size = size;
    self
  }

  pub fn size(&self) -> &String {
    &self.size
  }

  pub fn set_price(&mut self, price: ::models::ArticlePrice) {
    self.price = price;
  }

  pub fn with_price(mut self, price: ::models::ArticlePrice) -> ArticleUnit {
    self.price = price;
    self
  }

  pub fn price(&self) -> &::models::ArticlePrice {
    &self.price
  }

  pub fn set_original_price(&mut self, original_price: ::models::ArticlePrice) {
    self.original_price = original_price;
  }

  pub fn with_original_price(mut self, original_price: ::models::ArticlePrice) -> ArticleUnit {
    self.original_price = original_price;
    self
  }

  pub fn original_price(&self) -> &::models::ArticlePrice {
    &self.original_price
  }

  pub fn set_available(&mut self, available: bool) {
    self.available = available;
  }

  pub fn with_available(mut self, available: bool) -> ArticleUnit {
    self.available = available;
    self
  }

  pub fn available(&self) -> &bool {
    &self.available
  }

  pub fn set_stock(&mut self, stock: i32) {
    self.stock = stock;
  }

  pub fn with_stock(mut self, stock: i32) -> ArticleUnit {
    self.stock = stock;
    self
  }

  pub fn stock(&self) -> &i32 {
    &self.stock
  }

  pub fn set_partner_id(&mut self, partner_id: String) {
    self.partner_id = Some(partner_id);
  }

  pub fn with_partner_id(mut self, partner_id: String) -> ArticleUnit {
    self.partner_id = Some(partner_id);
    self
  }

  pub fn partner_id(&self) -> &Option<String> {
    &self.partner_id
  }

}



