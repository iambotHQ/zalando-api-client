/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// RecommendationsArticle : Zalando API Recommendation Article Schema

#[derive(Debug, Serialize, Deserialize)]
pub struct RecommendationsArticle {
  #[serde(rename = "id")] id: String,
  #[serde(rename = "modelId")] model_id: String,
  #[serde(rename = "name")] name: String,
  #[serde(rename = "shopUrl")] shop_url: String,
  #[serde(rename = "media")] media: ::models::ArticleMedia
}

impl RecommendationsArticle {
  /// Zalando API Recommendation Article Schema
  pub fn new(id: String, model_id: String, name: String, shop_url: String, media: ::models::ArticleMedia) -> RecommendationsArticle {
    RecommendationsArticle {
      id: id,
      model_id: model_id,
      name: name,
      shop_url: shop_url,
      media: media
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> RecommendationsArticle {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }

  pub fn set_model_id(&mut self, model_id: String) {
    self.model_id = model_id;
  }

  pub fn with_model_id(mut self, model_id: String) -> RecommendationsArticle {
    self.model_id = model_id;
    self
  }

  pub fn model_id(&self) -> &String {
    &self.model_id
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> RecommendationsArticle {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }

  pub fn set_shop_url(&mut self, shop_url: String) {
    self.shop_url = shop_url;
  }

  pub fn with_shop_url(mut self, shop_url: String) -> RecommendationsArticle {
    self.shop_url = shop_url;
    self
  }

  pub fn shop_url(&self) -> &String {
    &self.shop_url
  }

  pub fn set_media(&mut self, media: ::models::ArticleMedia) {
    self.media = media;
  }

  pub fn with_media(mut self, media: ::models::ArticleMedia) -> RecommendationsArticle {
    self.media = media;
    self
  }

  pub fn media(&self) -> &::models::ArticleMedia {
    &self.media
  }

}



