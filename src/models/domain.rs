/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Domain : Zalando API Domain Schema

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Domain {
  /// domain language
  #[serde(rename = "languageCode")] language_code: String,
  /// domain country code
  #[serde(rename = "countryCode")] country_code: String,
  /// domain currency code
  #[serde(rename = "currencyCode")] currency_code: String,
  /// domain tax rate
  #[serde(rename = "taxRate")] tax_rate: f32,
  /// domain root category
  #[serde(rename = "rootCategoryKey")] root_category_key: String,
  /// domain specific url
  #[serde(rename = "shopUrl")] shop_url: String
}

impl Domain {
  /// Zalando API Domain Schema
  pub fn new(language_code: String, country_code: String, currency_code: String, tax_rate: f32, root_category_key: String, shop_url: String) -> Domain {
    Domain {
      language_code: language_code,
      country_code: country_code,
      currency_code: currency_code,
      tax_rate: tax_rate,
      root_category_key: root_category_key,
      shop_url: shop_url
    }
  }

  pub fn set_language_code(&mut self, language_code: String) {
    self.language_code = language_code;
  }

  pub fn with_language_code(mut self, language_code: String) -> Domain {
    self.language_code = language_code;
    self
  }

  pub fn language_code(&self) -> &String {
    &self.language_code
  }

  pub fn set_country_code(&mut self, country_code: String) {
    self.country_code = country_code;
  }

  pub fn with_country_code(mut self, country_code: String) -> Domain {
    self.country_code = country_code;
    self
  }

  pub fn country_code(&self) -> &String {
    &self.country_code
  }

  pub fn set_currency_code(&mut self, currency_code: String) {
    self.currency_code = currency_code;
  }

  pub fn with_currency_code(mut self, currency_code: String) -> Domain {
    self.currency_code = currency_code;
    self
  }

  pub fn currency_code(&self) -> &String {
    &self.currency_code
  }

  pub fn set_tax_rate(&mut self, tax_rate: f32) {
    self.tax_rate = tax_rate;
  }

  pub fn with_tax_rate(mut self, tax_rate: f32) -> Domain {
    self.tax_rate = tax_rate;
    self
  }

  pub fn tax_rate(&self) -> &f32 {
    &self.tax_rate
  }

  pub fn set_root_category_key(&mut self, root_category_key: String) {
    self.root_category_key = root_category_key;
  }

  pub fn with_root_category_key(mut self, root_category_key: String) -> Domain {
    self.root_category_key = root_category_key;
    self
  }

  pub fn root_category_key(&self) -> &String {
    &self.root_category_key
  }

  pub fn set_shop_url(&mut self, shop_url: String) {
    self.shop_url = shop_url;
  }

  pub fn with_shop_url(mut self, shop_url: String) -> Domain {
    self.shop_url = shop_url;
    self
  }

  pub fn shop_url(&self) -> &String {
    &self.shop_url
  }

}



