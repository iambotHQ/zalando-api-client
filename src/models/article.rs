/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Article : A single article

#[derive(Debug, Serialize, Deserialize)]
pub struct Article {
  /// unique article id
  #[serde(rename = "id")] id: String,
  /// unique article model id
  #[serde(rename = "modelId")] model_id: String,
  /// article name
  #[serde(rename = "name")] name: String,
  /// url of the article within the Zalando webshop
  #[serde(rename = "shopUrl")] shop_url: String,
  /// the main color of the article
  #[serde(rename = "color")] color: String,
  /// will be true if at least one article unit is available
  #[serde(rename = "available")] available: bool,
  /// collection season the article belongs to
  #[serde(rename = "season")] season: String,
  /// collection year the article belongs to. Could be either a year or 'ALL'
  #[serde(rename = "seasonYear")] season_year: String,
  /// timestamp the article was available in the Zalando webshop
  #[serde(rename = "activationDate")] activation_date: String,
  /// any additional information of the article 
  #[serde(rename = "additionalInfos")] additional_infos: Vec<String>,
  /// gender of the article belongs to
  #[serde(rename = "genders")] genders: Vec<String>,
  /// age group of the article belongs to
  #[serde(rename = "ageGroups")] age_groups: Vec<String>,
  #[serde(rename = "brand")] brand: ::models::Brand,
  /// category keys of the article belongs to
  #[serde(rename = "categoryKeys")] category_keys: Vec<String>,
  /// article attributes
  #[serde(rename = "attributes")] attributes: Vec<::models::ArticleAttribute>,
  /// price of the article
  #[serde(rename = "units")] units: Vec<::models::ArticleUnit>,
  #[serde(rename = "tags")] tags: Option<Vec<String>>,
  #[serde(rename = "media")] media: ::models::ArticleMedia
}

impl Article {
  /// A single article
  pub fn new(id: String, model_id: String, name: String, shop_url: String, color: String, available: bool, season: String, season_year: String, activation_date: String, additional_infos: Vec<String>, genders: Vec<String>, age_groups: Vec<String>, brand: ::models::Brand, category_keys: Vec<String>, attributes: Vec<::models::ArticleAttribute>, units: Vec<::models::ArticleUnit>, media: ::models::ArticleMedia) -> Article {
    Article {
      id: id,
      model_id: model_id,
      name: name,
      shop_url: shop_url,
      color: color,
      available: available,
      season: season,
      season_year: season_year,
      activation_date: activation_date,
      additional_infos: additional_infos,
      genders: genders,
      age_groups: age_groups,
      brand: brand,
      category_keys: category_keys,
      attributes: attributes,
      units: units,
      tags: None,
      media: media
    }
  }

  pub fn set_id(&mut self, id: String) {
    self.id = id;
  }

  pub fn with_id(mut self, id: String) -> Article {
    self.id = id;
    self
  }

  pub fn id(&self) -> &String {
    &self.id
  }

  pub fn set_model_id(&mut self, model_id: String) {
    self.model_id = model_id;
  }

  pub fn with_model_id(mut self, model_id: String) -> Article {
    self.model_id = model_id;
    self
  }

  pub fn model_id(&self) -> &String {
    &self.model_id
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Article {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }

  pub fn set_shop_url(&mut self, shop_url: String) {
    self.shop_url = shop_url;
  }

  pub fn with_shop_url(mut self, shop_url: String) -> Article {
    self.shop_url = shop_url;
    self
  }

  pub fn shop_url(&self) -> &String {
    &self.shop_url
  }

  pub fn set_color(&mut self, color: String) {
    self.color = color;
  }

  pub fn with_color(mut self, color: String) -> Article {
    self.color = color;
    self
  }

  pub fn color(&self) -> &String {
    &self.color
  }

  pub fn set_available(&mut self, available: bool) {
    self.available = available;
  }

  pub fn with_available(mut self, available: bool) -> Article {
    self.available = available;
    self
  }

  pub fn available(&self) -> &bool {
    &self.available
  }

  pub fn set_season(&mut self, season: String) {
    self.season = season;
  }

  pub fn with_season(mut self, season: String) -> Article {
    self.season = season;
    self
  }

  pub fn season(&self) -> &String {
    &self.season
  }

  pub fn set_season_year(&mut self, season_year: String) {
    self.season_year = season_year;
  }

  pub fn with_season_year(mut self, season_year: String) -> Article {
    self.season_year = season_year;
    self
  }

  pub fn season_year(&self) -> &String {
    &self.season_year
  }

  pub fn set_activation_date(&mut self, activation_date: String) {
    self.activation_date = activation_date;
  }

  pub fn with_activation_date(mut self, activation_date: String) -> Article {
    self.activation_date = activation_date;
    self
  }

  pub fn activation_date(&self) -> &String {
    &self.activation_date
  }

  pub fn set_additional_infos(&mut self, additional_infos: Vec<String>) {
    self.additional_infos = additional_infos;
  }

  pub fn with_additional_infos(mut self, additional_infos: Vec<String>) -> Article {
    self.additional_infos = additional_infos;
    self
  }

  pub fn additional_infos(&self) -> &Vec&lt;String&gt; {
    &self.additional_infos
  }

  pub fn set_genders(&mut self, genders: Vec<String>) {
    self.genders = genders;
  }

  pub fn with_genders(mut self, genders: Vec<String>) -> Article {
    self.genders = genders;
    self
  }

  pub fn genders(&self) -> &Vec&lt;String&gt; {
    &self.genders
  }

  pub fn set_age_groups(&mut self, age_groups: Vec<String>) {
    self.age_groups = age_groups;
  }

  pub fn with_age_groups(mut self, age_groups: Vec<String>) -> Article {
    self.age_groups = age_groups;
    self
  }

  pub fn age_groups(&self) -> &Vec&lt;String&gt; {
    &self.age_groups
  }

  pub fn set_brand(&mut self, brand: ::models::Brand) {
    self.brand = brand;
  }

  pub fn with_brand(mut self, brand: ::models::Brand) -> Article {
    self.brand = brand;
    self
  }

  pub fn brand(&self) -> &::models::Brand {
    &self.brand
  }

  pub fn set_category_keys(&mut self, category_keys: Vec<String>) {
    self.category_keys = category_keys;
  }

  pub fn with_category_keys(mut self, category_keys: Vec<String>) -> Article {
    self.category_keys = category_keys;
    self
  }

  pub fn category_keys(&self) -> &Vec&lt;String&gt; {
    &self.category_keys
  }

  pub fn set_attributes(&mut self, attributes: Vec<::models::ArticleAttribute>) {
    self.attributes = attributes;
  }

  pub fn with_attributes(mut self, attributes: Vec<::models::ArticleAttribute>) -> Article {
    self.attributes = attributes;
    self
  }

  pub fn attributes(&self) -> &Vec&lt;::models::ArticleAttribute&gt; {
    &self.attributes
  }

  pub fn set_units(&mut self, units: Vec<::models::ArticleUnit>) {
    self.units = units;
  }

  pub fn with_units(mut self, units: Vec<::models::ArticleUnit>) -> Article {
    self.units = units;
    self
  }

  pub fn units(&self) -> &Vec&lt;::models::ArticleUnit&gt; {
    &self.units
  }

  pub fn set_tags(&mut self, tags: Vec<String>) {
    self.tags = Some(tags);
  }

  pub fn with_tags(mut self, tags: Vec<String>) -> Article {
    self.tags = Some(tags);
    self
  }

  pub fn tags(&self) -> &Vec&lt;String&gt; {
    &self.tags
  }

  pub fn set_media(&mut self, media: ::models::ArticleMedia) {
    self.media = media;
  }

  pub fn with_media(mut self, media: ::models::ArticleMedia) -> Article {
    self.media = media;
    self
  }

  pub fn media(&self) -> &::models::ArticleMedia {
    &self.media
  }

}



