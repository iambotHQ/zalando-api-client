/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Filter : Zalando API Filter Schema

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Filter {
  /// The unique name for a filter
  #[serde(rename = "name")] name: String,
  /// can this filter be used multiple times with different values in one search request
  #[serde(rename = "multiValue")] multi_value: bool,
  /// filter enum types
  #[serde(rename = "type")] _type: String,
  /// only if type is 'enum' this list contains all possible filter values
  #[serde(rename = "values")] values: Vec<::models::FilterValue>
}

impl Filter {
  /// Zalando API Filter Schema
  pub fn new(name: String, multi_value: bool, _type: String, values: Vec<::models::FilterValue>) -> Filter {
    Filter {
      name: name,
      multi_value: multi_value,
      _type: _type,
      values: values
    }
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Filter {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }

  pub fn set_multi_value(&mut self, multi_value: bool) {
    self.multi_value = multi_value;
  }

  pub fn with_multi_value(mut self, multi_value: bool) -> Filter {
    self.multi_value = multi_value;
    self
  }

  pub fn multi_value(&self) -> &bool {
    &self.multi_value
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = _type;
  }

  pub fn with__type(mut self, _type: String) -> Filter {
    self._type = _type;
    self
  }

  pub fn _type(&self) -> &String {
    &self._type
  }

  pub fn set_values(&mut self, values: Vec<::models::FilterValue>) {
    self.values = values;
  }

  pub fn with_values(mut self, values: Vec<::models::FilterValue>) -> Filter {
    self.values = values;
    self
  }

  pub fn values(&self) -> &Vec<::models::FilterValue> {
    &self.values
  }

}



