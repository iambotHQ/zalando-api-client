/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/// Category : Zalando API Category Schema

#[derive(Debug, Serialize, Deserialize, Clone)]
pub struct Category {
  /// The unique key for a category
  #[serde(rename = "key")] key: String,
  /// The numeric ID for a category.
  #[serde(rename = "cid")] cid: Option<i32>,
  /// Name of the category
  #[serde(rename = "name")] name: String,
  /// The key of the parent category
  #[serde(rename = "parentKey")] parent_key: Option<String>,
  /// The list of keys of the child categories
  #[serde(rename = "childKeys")] child_keys: Vec<String>,
  /// The type of the category.
  #[serde(rename = "type")] _type: Option<String>,
  /// Containing articles are from last seasons
  #[serde(rename = "outlet")] outlet: Option<bool>,
  /// The category is hidden and not shown on the Zalando web shop
  #[serde(rename = "hidden")] hidden: Option<bool>,
  /// The target group of the articles from this category
  #[serde(rename = "targetGroup")] target_group: String,
  /// list of filter names that are reasonable to use within this category
  #[serde(rename = "suggestedFilters")] suggested_filters: Vec<String>
}

impl Category {
  /// Zalando API Category Schema
  pub fn new(key: String, name: String, child_keys: Vec<String>, target_group: String, suggested_filters: Vec<String>) -> Category {
    Category {
      key: key,
      cid: None,
      name: name,
      parent_key: None,
      child_keys: child_keys,
      _type: None,
      outlet: None,
      hidden: None,
      target_group: target_group,
      suggested_filters: suggested_filters
    }
  }

  pub fn set_key(&mut self, key: String) {
    self.key = key;
  }

  pub fn with_key(mut self, key: String) -> Category {
    self.key = key;
    self
  }

  pub fn key(&self) -> &String {
    &self.key
  }

  pub fn set_cid(&mut self, cid: i32) {
    self.cid = Some(cid);
  }

  pub fn with_cid(mut self, cid: i32) -> Category {
    self.cid = Some(cid);
    self
  }

  pub fn cid(&self) -> &Option<i32> {
    &self.cid
  }

  pub fn set_name(&mut self, name: String) {
    self.name = name;
  }

  pub fn with_name(mut self, name: String) -> Category {
    self.name = name;
    self
  }

  pub fn name(&self) -> &String {
    &self.name
  }

  pub fn set_parent_key(&mut self, parent_key: String) {
    self.parent_key = Some(parent_key);
  }

  pub fn with_parent_key(mut self, parent_key: String) -> Category {
    self.parent_key = Some(parent_key);
    self
  }

  pub fn parent_key(&self) -> &Option<String> {
    &self.parent_key
  }

  pub fn set_child_keys(&mut self, child_keys: Vec<String>) {
    self.child_keys = child_keys;
  }

  pub fn with_child_keys(mut self, child_keys: Vec<String>) -> Category {
    self.child_keys = child_keys;
    self
  }

  pub fn child_keys(&self) -> &Vec<String> {
    &self.child_keys
  }

  pub fn set__type(&mut self, _type: String) {
    self._type = Some(_type);
  }

  pub fn with__type(mut self, _type: String) -> Category {
    self._type = Some(_type);
    self
  }

  pub fn _type(&self) -> &Option<String> {
    &self._type
  }

  pub fn set_outlet(&mut self, outlet: bool) {
    self.outlet = Some(outlet);
  }

  pub fn with_outlet(mut self, outlet: bool) -> Category {
    self.outlet = Some(outlet);
    self
  }

  pub fn outlet(&self) -> &Option<bool> {
    &self.outlet
  }

  pub fn set_hidden(&mut self, hidden: bool) {
    self.hidden = Some(hidden);
  }

  pub fn with_hidden(mut self, hidden: bool) -> Category {
    self.hidden = Some(hidden);
    self
  }

  pub fn hidden(&self) -> &Option<bool> {
    &self.hidden
  }

  pub fn set_target_group(&mut self, target_group: String) {
    self.target_group = target_group;
  }

  pub fn with_target_group(mut self, target_group: String) -> Category {
    self.target_group = target_group;
    self
  }

  pub fn target_group(&self) -> &String {
    &self.target_group
  }

  pub fn set_suggested_filters(&mut self, suggested_filters: Vec<String>) {
    self.suggested_filters = suggested_filters;
  }

  pub fn with_suggested_filters(mut self, suggested_filters: Vec<String>) -> Category {
    self.suggested_filters = suggested_filters;
    self
  }

  pub fn suggested_filters(&self) -> &Vec<String> {
    &self.suggested_filters
  }

}



