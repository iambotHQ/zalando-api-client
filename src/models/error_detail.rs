/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


#[derive(Debug, Serialize, Deserialize)]
pub struct ErrorDetail {
  #[serde(rename = "key")] key: Option<String>,
  #[serde(rename = "value")] value: Option<String>,
  #[serde(rename = "name")] name: Option<String>,
  #[serde(rename = "invalidName")] invalid_name: Option<bool>,
  #[serde(rename = "invalidValues")] invalid_values: Option<Vec<String>>
}

impl ErrorDetail {
  pub fn new() -> ErrorDetail {
    ErrorDetail {
      key: None,
      value: None,
      name: None,
      invalid_name: None,
      invalid_values: None
    }
  }

  pub fn set_key(&mut self, key: String) {
    self.key = Some(key);
  }

  pub fn with_key(mut self, key: String) -> ErrorDetail {
    self.key = Some(key);
    self
  }

  pub fn key(&self) -> &Option<String> {
    &self.key
  }

  pub fn set_value(&mut self, value: String) {
    self.value = Some(value);
  }

  pub fn with_value(mut self, value: String) -> ErrorDetail {
    self.value = Some(value);
    self
  }

  pub fn value(&self) -> &Option<String> {
    &self.value
  }

  pub fn set_name(&mut self, name: String) {
    self.name = Some(name);
  }

  pub fn with_name(mut self, name: String) -> ErrorDetail {
    self.name = Some(name);
    self
  }

  pub fn name(&self) -> &Option<String> {
    &self.name
  }

  pub fn set_invalid_name(&mut self, invalid_name: bool) {
    self.invalid_name = Some(invalid_name);
  }

  pub fn with_invalid_name(mut self, invalid_name: bool) -> ErrorDetail {
    self.invalid_name = Some(invalid_name);
    self
  }

  pub fn invalid_name(&self) -> &Option<bool> {
    &self.invalid_name
  }

  pub fn set_invalid_values(&mut self, invalid_values: Vec<String>) {
    self.invalid_values = Some(invalid_values);
  }

  pub fn with_invalid_values(mut self, invalid_values: Vec<String>) -> ErrorDetail {
    self.invalid_values = Some(invalid_values);
    self
  }

  pub fn invalid_values(&self) -> &Option<Vec<String>> {
    &self.invalid_values
  }

}



