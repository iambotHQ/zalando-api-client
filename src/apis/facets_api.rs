/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct FacetsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> FacetsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> FacetsApiClient<C> {
        FacetsApiClient {
            configuration: configuration,
        }
    }
}

pub trait FacetsApi {
    fn FacetsGet(&self, age_group: Vec<String>, article_id: Vec<String>, activation_date: Vec<String>, article_model_id: Vec<String>, assortment_area: Vec<String>, brand: Vec<String>, brandfamily: Vec<String>, category: Vec<String>, color: Vec<String>, den: Vec<String>, filling: Vec<String>, gender: Vec<String>, heel_form: Vec<String>, heel_height: Vec<String>, length: &str, occasion: Vec<String>, pattern: Vec<String>, price: &str, sale: Vec<String>, season: Vec<String>, shaft_height: Vec<String>, shaft_width: Vec<String>, shirt_collar: Vec<String>, shoe_fastener: Vec<String>, shoe_toecap: Vec<String>, shop_area: Vec<String>, size: &str, sports: Vec<String>, technology: Vec<String>, trouser_rise: Vec<String>, upper_material: Vec<String>, volume: Vec<String>, accept_language: &str, fields: Vec<String>) -> Box<Future<Item = ::models::Facets, Error = Error>>;
}


impl<C: hyper::client::Connect>FacetsApi for FacetsApiClient<C> {
    fn FacetsGet(&self, age_group: Vec<String>, article_id: Vec<String>, activation_date: Vec<String>, article_model_id: Vec<String>, assortment_area: Vec<String>, brand: Vec<String>, brandfamily: Vec<String>, category: Vec<String>, color: Vec<String>, den: Vec<String>, filling: Vec<String>, gender: Vec<String>, heel_form: Vec<String>, heel_height: Vec<String>, length: &str, occasion: Vec<String>, pattern: Vec<String>, price: &str, sale: Vec<String>, season: Vec<String>, shaft_height: Vec<String>, shaft_width: Vec<String>, shirt_collar: Vec<String>, shoe_fastener: Vec<String>, shoe_toecap: Vec<String>, shop_area: Vec<String>, size: &str, sports: Vec<String>, technology: Vec<String>, trouser_rise: Vec<String>, upper_material: Vec<String>, volume: Vec<String>, accept_language: &str, fields: Vec<String>) -> Box<Future<Item = ::models::Facets, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let query = ::url::form_urlencoded::Serializer::new(String::new())
            .append_pair("ageGroup", &age_group.join(",").to_string())
            .append_pair("articleId", &article_id.join(",").to_string())
            .append_pair("activationDate", &activation_date.join(",").to_string())
            .append_pair("articleModelId", &article_model_id.join(",").to_string())
            .append_pair("assortmentArea", &assortment_area.join(",").to_string())
            .append_pair("brand", &brand.join(",").to_string())
            .append_pair("brandfamily", &brandfamily.join(",").to_string())
            .append_pair("category", &category.join(",").to_string())
            .append_pair("color", &color.join(",").to_string())
            .append_pair("den", &den.join(",").to_string())
            .append_pair("filling", &filling.join(",").to_string())
            .append_pair("gender", &gender.join(",").to_string())
            .append_pair("heelForm", &heel_form.join(",").to_string())
            .append_pair("heelHeight", &heel_height.join(",").to_string())
            .append_pair("length", &length.to_string())
            .append_pair("occasion", &occasion.join(",").to_string())
            .append_pair("pattern", &pattern.join(",").to_string())
            .append_pair("price", &price.to_string())
            .append_pair("sale", &sale.join(",").to_string())
            .append_pair("season", &season.join(",").to_string())
            .append_pair("shaftHeight", &shaft_height.join(",").to_string())
            .append_pair("shaftWidth", &shaft_width.join(",").to_string())
            .append_pair("shirtCollar", &shirt_collar.join(",").to_string())
            .append_pair("shoeFastener", &shoe_fastener.join(",").to_string())
            .append_pair("shoeToecap", &shoe_toecap.join(",").to_string())
            .append_pair("shopArea", &shop_area.join(",").to_string())
            .append_pair("size", &size.to_string())
            .append_pair("sports", &sports.join(",").to_string())
            .append_pair("technology", &technology.join(",").to_string())
            .append_pair("trouserRise", &trouser_rise.join(",").to_string())
            .append_pair("upperMaterial", &upper_material.join(",").to_string())
            .append_pair("volume", &volume.join(",").to_string())
            .append_pair("fields", &fields.join(",").to_string())
            .finish();
        let uri_str = format!("{}/facets{}", configuration.base_path, query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());

        {
            let mut headers = req.headers_mut();
            headers.set_raw("Accept-Language", accept_language);
        }


        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::Facets, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

}
