/* 
 * Zalando Shop API
 *
 * The shop API empowers developers to build amazing new apps or websites using Zalando shop data and services.
 *
 * OpenAPI spec version: v1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

use std::rc::Rc;
use std::borrow::Borrow;

use hyper;
use serde_json;
use futures;
use futures::{Future, Stream};

use super::{Error, configuration};

pub struct BrandsApiClient<C: hyper::client::Connect> {
    configuration: Rc<configuration::Configuration<C>>,
}

impl<C: hyper::client::Connect> BrandsApiClient<C> {
    pub fn new(configuration: Rc<configuration::Configuration<C>>) -> BrandsApiClient<C> {
        BrandsApiClient {
            configuration: configuration,
        }
    }
}

pub trait BrandsApi {
    fn BrandsGet(&self, key: Option<Vec<String>>, name: Option<Vec<String>>, brand_family_name: Option<Vec<String>>, brand_family_key: Option<Vec<String>>, page: Option<&str>, page_size: Option<&str>, accept_language: Option<&str>, fields: Option<Vec<String>>) -> Box<Future<Item = ::models::Brands, Error = Error>>;
    fn BrandsKeyGet(&self, key: &str, accept_language: Option<&str>, fields: Option<Vec<String>>) -> Box<Future<Item = ::models::Brand, Error = Error>>;
}


impl<C: hyper::client::Connect>BrandsApi for BrandsApiClient<C> {
    fn BrandsGet(&self, key: Option<Vec<String>>, name: Option<Vec<String>>, brand_family_name: Option<Vec<String>>, brand_family_key: Option<Vec<String>>, page: Option<&str>, page_size: Option<&str>, accept_language: Option<&str>, fields: Option<Vec<String>>) -> Box<Future<Item = ::models::Brands, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let mut query = ::url::form_urlencoded::Serializer::new(String::new());
        match key{
           Some(value)=>{query.append_pair("key", &value.join(",").to_string());},
           None=>{},
        }
        match name{
           Some(value)=>{query.append_pair("name", &value.join(",").to_string());},
           None=>{},
        }
        match brand_family_name{
           Some(value)=>{query.append_pair("brandFamilyName", &value.join(",").to_string());},
           None=>{},
        }
        match brand_family_key{
           Some(value)=>{query.append_pair("brandFamilyKey", &value.join(",").to_string());},
           None=>{},
        }
        match page{
           Some(value)=>{query.append_pair("page", &value.to_string());},
           None=>{},
        }
        match page_size{
           Some(value)=>{query.append_pair("pageSize", &value.to_string());},
           None=>{},
        }
        match fields{
           Some(value)=>{query.append_pair("fields", &value.join(",").to_string());},
           None=>{},
        }
        let finished_query=query.finish();
        let uri_str = format!("{}/brands{}", configuration.base_path, finished_query);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());

        {
            let mut headers = req.headers_mut();
            match accept_language{
               Some(value)=>{headers.set_raw("Accept-Language", value);},
               None=>{},
            }
        }


        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::Brands, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

    fn BrandsKeyGet(&self, key: &str, accept_language: Option<&str>, fields: Option<Vec<String>>) -> Box<Future<Item = ::models::Brand, Error = Error>> {
        let configuration: &configuration::Configuration<C> = self.configuration.borrow();

        let method = hyper::Method::Get;

        let mut query = ::url::form_urlencoded::Serializer::new(String::new());
        match fields{
           Some(value)=>{query.append_pair("fields", &value.join(",").to_string());},
           None=>{},
        }
        let finished_query=query.finish();
        let uri_str = format!("{}/brands/{key}{}", configuration.base_path, finished_query, key=key);

        let uri = uri_str.parse();
        // TODO(farcaller): handle error
        // if let Err(e) = uri {
        //     return Box::new(futures::future::err(e));
        // }
        let mut req = hyper::Request::new(method, uri.unwrap());

        {
            let mut headers = req.headers_mut();
            match accept_language{
               Some(value)=>{headers.set_raw("Accept-Language", value);},
               None=>{},
            }
        }


        // send request
        Box::new(
            configuration.client.request(req).and_then(|res| { res.body().concat2() })
            .map_err(|e| Error::from(e))
            .and_then(|body| {
                let parsed: Result<::models::Brand, _> = serde_json::from_slice(&body);
                parsed.map_err(|e| Error::from(e))
            }).map_err(|e| Error::from(e))
        )
    }

}
